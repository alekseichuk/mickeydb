/*
 * generated by Xtext 2.10.0
 */
package com.justeat.mickeydb.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import com.justeat.mickeydb.mickeyLang.UpdateColumnExpression
import com.justeat.mickeydb.mickeyLang.MickeyLangPackage
import org.eclipse.xtext.scoping.IScope
import static extension com.justeat.mickeydb.ModelUtil.*
import com.justeat.mickeydb.mickeyLang.DMLStatement
import com.justeat.mickeydb.mickeyLang.CreateTableStatement
import org.eclipse.xtext.scoping.Scopes
import com.justeat.mickeydb.mickeyLang.CreateViewStatement
import com.justeat.mickeydb.MickeyModel
import com.justeat.mickeydb.mickeyLang.MickeyFile
import org.apache.log4j.Logger
import com.google.inject.Inject
import org.eclipse.xtext.resource.IResourceDescriptions
import com.justeat.mickeydb.MickeyAssembler
import com.justeat.mickeydb.MickeyEnvironment
import com.justeat.mickeydb.mickeyLang.MigrationBlock
import org.eclipse.emf.ecore.util.EcoreUtil
import com.justeat.mickeydb.mickeyLang.ColumnSourceRef
import com.justeat.mickeydb.mickeyLang.UpdateStatement
import com.justeat.mickeydb.mickeyLang.NewColumn
import com.justeat.mickeydb.mickeyLang.CreateTriggerStatement
import com.justeat.mickeydb.mickeyLang.OldColumn
import com.justeat.mickeydb.mickeyLang.SingleSourceTable
import org.eclipse.xtext.naming.QualifiedName
import com.justeat.mickeydb.mickeyLang.SelectStatement
import com.justeat.mickeydb.mickeyLang.SelectExpression
import java.util.ArrayList
import com.justeat.mickeydb.mickeyLang.ContentUriParamSegment
import com.justeat.mickeydb.mickeyLang.ActionStatement
import com.justeat.mickeydb.mickeyLang.ContentUriQueryParam

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MickeyLangScopeProvider extends AbstractMickeyLangScopeProvider {

	static final Logger LOG = Logger.getLogger(MickeyLangScopeProvider);
	
	@Inject IResourceDescriptions resourceDescriptions;
	@Inject MickeyAssembler assembler
	@Inject MickeyEnvironment mickeyEnvironment
	
	override getScope(EObject context, EReference reference) {
		var scope = super.getScope(context, reference)
		
		if(context instanceof UpdateColumnExpression && reference == MickeyLangPackage.Literals.UPDATE_COLUMN_EXPRESSION__COLUMN_NAME) {
			return scope_UpdateColumnExpression_columnName(context as UpdateColumnExpression, reference)
		} else if(context instanceof ColumnSourceRef && reference == MickeyLangPackage.Literals.COLUMN_SOURCE_REF__COLUMN) {
			return scope_ColumnSourceRef_column(context as ColumnSourceRef, reference)
		} else if(context instanceof NewColumn && reference == MickeyLangPackage.Literals.NEW_COLUMN__COLUMN) {
			return scope_NewColumn_column(context as NewColumn, reference)
		} else if(context instanceof OldColumn && reference == MickeyLangPackage.Literals.OLD_COLUMN__COLUMN) {
			return scope_OldColumn_column(context as OldColumn, reference)
		} else if(context instanceof SingleSourceTable && reference == MickeyLangPackage.Literals.SINGLE_SOURCE_TABLE__TABLE_REFERENCE) {
			return scope_SingleSourceTable_tableReference(context as SingleSourceTable, reference)
		} else if(context instanceof ContentUriQueryParam && reference == MickeyLangPackage.Literals.CONTENT_URI_QUERY_PARAM__COLUMN) {
			return scope_ContentUriQueryParam_column(context as ContentUriQueryParam, reference)
		} else if(context instanceof ContentUriParamSegment && reference == MickeyLangPackage.Literals.CONTENT_URI_PARAM_SEGMENT__PARAM) {
			return scope_ContentUriParamSegment_param(context as ContentUriParamSegment, reference)
		} else if(context instanceof ActionStatement && reference == MickeyLangPackage.Literals.ACTION_STATEMENT__TYPE) {
			return scope_ActionStatement_type(context as ActionStatement, reference)
		}
		
		return scope
	}
	
	def IScope scope_UpdateColumnExpression_columnName(UpdateColumnExpression context, EReference ref) {
		var dbName = context.model.databaseName
		var statement = context.getAncestorOfType(DMLStatement)
		var tableName = statement.targetTableName
		
		Scopes.scopeFor(getAllTableColumns(context, dbName, tableName), IScope.NULLSCOPE)
	}
	
	def IScope scope_ColumnSourceRef_column(ColumnSourceRef context, EReference ref) {
		var dbName = context.model.databaseName
		
		var tableName = "";
		var ArrayList<EObject> allColumns = new ArrayList<EObject>();
		if(context.source != null) {
			tableName = context.source.getFeatureNodeText(MickeyLangPackage.Literals.SINGLE_SOURCE_TABLE__TABLE_REFERENCE)
		} else {
			
			var updateStatement = context.getAncestorOfType(UpdateStatement)
			
			if (updateStatement != null) {
				tableName = updateStatement.getFeatureNodeText(MickeyLangPackage.Literals.UPDATE_STATEMENT__TABLE)
			} else {
				var selectStatement = context.getAncestorOfType(SelectStatement)
				if(selectStatement != null) {
					tableName = selectStatement.targetTableName
					var selectList = selectStatement.core.allSelectExpressions.filter(SelectExpression)?.head?.selectList
					if(selectList != null) {
						allColumns.addAll(selectList.resultColumns)
					}
				}
			}
		}
		
		if(tableName == "") {
			return IScope.NULLSCOPE
		}
		
		allColumns.addAll(getAllTableColumns(context, dbName, tableName))
		
	    return Scopes.scopeFor(allColumns, IScope.NULLSCOPE)
	}
	
	def IScope scope_NewColumn_column(NewColumn context, EReference ref) {
		var dbName = context.model.databaseName
		var statement = context.getAncestorOfType(CreateTriggerStatement)
		var tableName = statement.getFeatureNodeText(MickeyLangPackage.Literals.CREATE_TRIGGER_STATEMENT__TABLE)

		Scopes.scopeFor(getAllTableColumns(context, dbName, tableName), IScope.NULLSCOPE)		
	}
	
	def IScope scope_OldColumn_column(OldColumn context, EReference ref) {
		var dbName = context.model.databaseName
		var statement = context.getAncestorOfType(CreateTriggerStatement)
		var tableName = statement.getFeatureNodeText(MickeyLangPackage.Literals.CREATE_TRIGGER_STATEMENT__TABLE)
		
		Scopes.scopeFor(getAllTableColumns(context, dbName, tableName), IScope.NULLSCOPE)	
	}
	
	def IScope scope_SingleSourceTable_tableReference(SingleSourceTable context, EReference ref) {
		var scope = delegateGetScope(context, ref)
		var model = context.model
		var tableName = context.getFeatureNodeText(ref)
		var scopedElements = 
					scope.getElements(QualifiedName.create(model.databaseName, tableName))
					.map[e|EcoreUtil.resolve(e.EObjectOrProxy, context)]

		Scopes.scopeFor(scopedElements, scope)		
	}
	
	def IScope scope_ContentUriParamSegment_param(ContentUriParamSegment context, EReference ref) {
		var dbName = context.model.databaseName
		
		var tableName = "";
		var action = context.getAncestorOfType(typeof(ActionStatement));
		tableName = action.getFeatureNodeText(MickeyLangPackage.Literals.ACTION_STATEMENT__TYPE)
	    Scopes.scopeFor(getAllTableColumns(context, dbName, tableName)	, IScope.NULLSCOPE)
	}
	
	def IScope scope_ContentUriQueryParam_column(ContentUriQueryParam context, EReference ref) {
		var dbName = context.model.databaseName
		
		var tableName = "";
		var action = context.getAncestorOfType(typeof(ActionStatement));
		tableName = action.getFeatureNodeText(MickeyLangPackage.Literals.ACTION_STATEMENT__TYPE)
	    Scopes.scopeFor(getAllTableColumns(context, dbName, tableName), IScope.NULLSCOPE)	
	}
	
	def IScope scope_ActionStatement_type(ActionStatement context, EReference ref) {
		var scope = delegateGetScope(context, ref)
		var model = context.model
		var tableName = context.getFeatureNodeText(ref)
		var scopedElements = 
					scope.getElements(QualifiedName.create(model.databaseName, tableName))
					.map[e|EcoreUtil.resolve(e.EObjectOrProxy, context)]

		Scopes.scopeFor(scopedElements, scope)
	}
	
	def getAllTableColumns(EObject context, String dbName, String tableName) {
		var mickeyModel = context.getMickeyModelInScope
		
		var ArrayList<EObject> columns = new ArrayList<EObject>();
			    
	    if(mickeyModel != null) {
	    	var definition = mickeyModel.databases.get(dbName).snapshot.getTableDefinition(tableName)
	    	if(definition == null) {
	    		definition = mickeyModel.databases.get(dbName).initTables.findFirst[it.name.equals(tableName)]
	    	}
	    	if(definition == null) {
	    		definition = mickeyModel.databases.get(dbName).initViews.findFirst[it.name.equals(tableName)]
	    	}
	    	if(definition instanceof CreateTableStatement) {
	    		var table = definition as CreateTableStatement
	    		columns.addAll(table.columnDefs)	
	    	} else {
	    		var view = definition as CreateViewStatement
	    		columns.addAll(view.viewResultColumns)  
	    	}
	    }
	    
	   	return columns
	}
	
	def MickeyModel getMickeyModelInScope(EObject context) {
		
		var Iterable<MickeyFile> files;
		
		LOG.debug("[Get Model In Scope] Standalone: " +mickeyEnvironment.isStandalone())
		
		if(mickeyEnvironment.isStandalone()) {
			var resources = context.eResource.resourceSet.resources
			for(r : resources) {
				LOG.debug("[Found Resource]: " + r.URI);
			}
			files = resources.filter[it.URI.toString.endsWith(".mickey")].map[it.allContents.head as MickeyFile]
	    } else {
	    	files = resourceDescriptions.getExportedObjectsByType(MickeyLangPackage.Literals.MICKEY_FILE)
				.map[e|EcoreUtil.resolve(e.EObjectOrProxy, context) as MickeyFile].toList	    	
	    }
	    		
	    if(files.size > 0) {
	    	LOG.debug("[Get Model In Scope] Files: " + files.size)
	    	var migration = context.getAncestorOfType(MigrationBlock)
	    	try {
	    		return assembler.assemble(files, migration)
	    	} catch(Exception e) {
	    		LOG.debug("[Get Model In Scope] Failed with error:" + e.message, e)
	    	}
	    }
	    
	    LOG.debug("[Get Model In Scope] Failed ")
	    
	    return null
	}
}
